#!/bin/bash

DEPLOYER_DIR=$PWD/node_modules/@croquiscom/croquis.deployer
if [ ! -d $DEPLOYER_DIR ]; then
  # for sample
  DEPLOYER_DIR=$PWD/..
fi

BRANCH=`git branch | awk '/\*/ { print $2; }'`
REF=`git show-ref --heads $BRANCH`
REF=${REF:0:7}

source $DEPLOYER_DIR/bin/_read_config.sh

#echo !- Build documentation
#cake doc

function run_remote_command {
  if [[ -n "$PROXY_COMMAND" ]]; then
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ProxyCommand="$PROXY_COMMAND" $CONFIG_SERVER $*
  else
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $CONFIG_SERVER $*
  fi
}

function remote_sync {
  if [[ -n "$PROXY_COMMAND" ]]; then
    rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ProxyCommand='$PROXY_COMMAND'" -az --delete $* $CONFIG_SERVER:$TARGET
  else
    rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" -az --delete $* $CONFIG_SERVER:$TARGET
  fi
}

function deploy_ec2 {
  TARGET=work/$CONFIG_PROJECT

  echo !- Sync sources with server
  rm -f log/* upload_tmp/* cov.html
  if [[ -n "$CONFIG_BROKER_SERVER" ]]; then
    SERVER_HOST=`echo $CONFIG_SERVER | sed s/.*@//`
    PROXY_COMMAND="ssh -q -W $SERVER_HOST:22 $CONFIG_BROKER_SERVER"
  fi
  run_remote_command mkdir -p work
  remote_sync --exclude node_modules --copy-unsafe-links .
  remote_sync $DEPLOYER_DIR/bin/_deploy_on_server.sh
  remote_sync $DEPLOYER_DIR/bin/run_job.sh
  remote_sync $DEPLOYER_DIR/bin/on_boot.sh
  run_remote_command $TARGET/_deploy_on_server.sh $CONFIG_PROJECT $REF
}

function deploy_eb {
  command -v aws >/dev/null 2>&1 || { echo Please intsall AWS CLI via 'pip install awscli'; exit; }
  command -v jq >/dev/null 2>&1 || { echo Please intsall jq via 'brew install jq'; exit; }

  echo !- Make archive
  DATE=`date +'%Y%m%d-%H%M'`
  FILENAME=$DATE-$REF.zip
  zip -q -r $FILENAME .ebextensions * -x "node_modules/*" "doc/*" "test/*" "crojsdoc.yaml" "Cakefile"

  echo !- Upload to S3
  STORAGE_LOCATION=`aws --region $CONFIG_ELASTICBEANSTALK_REGION elasticbeanstalk create-storage-location | jq -r ".S3Bucket"`
  aws --region $CONFIG_ELASTICBEANSTALK_REGION s3 cp "$FILENAME" "s3://$STORAGE_LOCATION/$CONFIG_ELASTICBEANSTALK_APPLICATION_NAME/$FILENAME"
  rm $FILENAME

  echo !- Make an application version
  aws --region $CONFIG_ELASTICBEANSTALK_REGION elasticbeanstalk create-application-version --application-name "$CONFIG_ELASTICBEANSTALK_APPLICATION_NAME" --version-label "$FILENAME" --source-bundle "S3Bucket=$STORAGE_LOCATION,S3Key=$CONFIG_ELASTICBEANSTALK_APPLICATION_NAME/$FILENAME" --process

  echo !- Activate new application version
  aws --region $CONFIG_ELASTICBEANSTALK_REGION elasticbeanstalk update-environment --environment-name "$CONFIG_ELASTICBEANSTALK_ENVIRONMENT_NAME" --version-label "$FILENAME"
}

if [[ -z "$CONFIG_ELASTICBEANSTALK_REGION" ]]; then
  deploy_ec2
else
  deploy_eb
fi
